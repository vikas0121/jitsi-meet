"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AvatarWithoutAnalytics = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _analyticsNext = require("@atlaskit/analytics-next");

var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));

var _package = require("../../package.json");

var _constants = require("./constants");

var _Presence = _interopRequireDefault(require("./Presence"));

var _AvatarImage = _interopRequireDefault(require("./AvatarImage"));

var _Status = _interopRequireDefault(require("./Status"));

var _Avatar = _interopRequireWildcard(require("../styled/Avatar"));

var _utils = require("../utils");

var _helpers = require("../helpers");

var _hoc = require("../hoc");

var _theme = require("../theme");

var warn = function warn(message) {
  if (process.env.NODE_ENV !== 'production') {
    console.warn(message); // eslint-disable-line no-console
  }
};

var Avatar =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Avatar, _Component);

  function Avatar() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Avatar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Avatar)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "ref", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "createAndFireEventOnAtlaskit", (0, _analyticsNext.createAndFireEvent)('atlaskit'));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "clickAnalyticsCaller", function () {
      var createAnalyticsEvent = _this.props.createAnalyticsEvent;

      if (createAnalyticsEvent) {
        return _this.createAndFireEventOnAtlaskit({
          action: 'clicked',
          actionSubject: 'avatar',
          attributes: {
            componentName: 'avatar',
            packageName: _package.name,
            packageVersion: _package.version
          }
        })(createAnalyticsEvent);
      }

      return undefined;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "blur", function () {
      if (_this.ref) _this.ref.blur();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "focus", function () {
      if (_this.ref) _this.ref.focus();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "guardedClick", function (event) {
      var _this$props = _this.props,
          isDisabled = _this$props.isDisabled,
          onClick = _this$props.onClick;
      if (isDisabled || typeof onClick !== 'function') return;

      var item = _utils.omit.apply(void 0, [_this.props].concat((0, _toConsumableArray2.default)(_constants.propsOmittedFromClickData)));

      var analyticsEvent = _this.clickAnalyticsCaller();

      onClick({
        item: item,
        event: event
      }, analyticsEvent);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderIcon", function () {
      var _this$props2 = _this.props,
          appearance = _this$props2.appearance,
          borderColor = _this$props2.borderColor,
          presence = _this$props2.presence,
          status = _this$props2.status;
      var showPresence = Boolean(presence);
      var showStatus = Boolean(status); // no icon needed

      if (!showStatus && !showPresence) {
        return null;
      } // cannot display both


      if (showStatus && showPresence) {
        warn('Avatar supports `presence` OR `status` properties, not both.');
        return null;
      } // only support particular sizes


      if (_constants.validIconSizes.indexOf(_this.props.size) === -1) {
        warn("Avatar size \"".concat(String(_this.props.size), "\" does NOT support ").concat(showPresence ? 'presence' : 'status'));
        return null;
      } // we can cast here because we already know that it is a valid icon size


      var size = _this.props.size;

      var indicator = function () {
        if (showPresence) {
          var customPresenceNode = (0, _typeof2.default)(presence) === 'object' ? presence : null;
          return _react.default.createElement(_Avatar.PresenceWrapper, {
            appearance: appearance,
            size: size
          }, _react.default.createElement(_Presence.default, {
            borderColor: borderColor,
            presence: !customPresenceNode && presence,
            size: size
          }, customPresenceNode));
        } // showStatus


        var customStatusNode = (0, _typeof2.default)(status) === 'object' ? status : null;
        return _react.default.createElement(_Avatar.StatusWrapper, {
          appearance: appearance,
          size: size
        }, _react.default.createElement(_Status.default, {
          borderColor: borderColor,
          status: !customStatusNode && status,
          size: size
        }, customStatusNode));
      }();

      return indicator;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "setRef", function (ref) {
      _this.ref = ref;
    });
    return _this;
  }

  (0, _createClass2.default)(Avatar, [{
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          appearance = _this$props3.appearance,
          enableTooltip = _this$props3.enableTooltip,
          name = _this$props3.name,
          size = _this$props3.size,
          src = _this$props3.src,
          stackIndex = _this$props3.stackIndex,
          onClick = _this$props3.onClick,
          theme = _this$props3.theme; // distill props from context, props, and state

      var enhancedProps = (0, _helpers.getProps)(this); // provide element type based on props
      // TODO: why not enhanced props?

      var Inner = (0, _helpers.getStyledAvatar)(this.props);
      Inner.displayName = 'Inner';

      var AvatarNode = _react.default.createElement(_theme.Theme.Provider, {
        value: theme
      }, _react.default.createElement(_Avatar.default, {
        size: size,
        stackIndex: stackIndex
      }, _react.default.createElement(Inner, (0, _extends2.default)({
        innerRef: this.setRef
      }, enhancedProps, {
        onClick: onClick != null ? this.guardedClick : undefined
      }), _react.default.createElement(_AvatarImage.default, {
        alt: name,
        appearance: appearance,
        size: size,
        src: src
      })), this.renderIcon()));

      return enableTooltip && name ? _react.default.createElement(_tooltip.default, {
        content: name
      }, AvatarNode) : AvatarNode;
    }
  }]);
  return Avatar;
}(_react.Component);

(0, _defineProperty2.default)(Avatar, "defaultProps", {
  appearance: 'circle',
  enableTooltip: true,
  size: 'medium'
});
var AvatarWithoutAnalytics = (0, _hoc.mapProps)({
  appearance: function appearance(props) {
    return props.appearance || Avatar.defaultProps.appearance;
  },
  // 1
  isInteractive: function isInteractive(props) {
    return Boolean((typeof props.enableTooltip !== 'undefined' ? props.enableTooltip : Avatar.defaultProps.enableTooltip) && props.name);
  } // 2

})((0, _hoc.withPseudoState)(Avatar));
exports.AvatarWithoutAnalytics = AvatarWithoutAnalytics;

var _default = (0, _analyticsNext.withAnalyticsContext)({
  componentName: 'avatar',
  packageName: _package.name,
  packageVersion: _package.version
})((0, _analyticsNext.withAnalyticsEvents)()(AvatarWithoutAnalytics));

exports.default = _default;