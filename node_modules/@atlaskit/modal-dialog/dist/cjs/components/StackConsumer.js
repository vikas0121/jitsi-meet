"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

// This is the source of truth for open modals
var stackConsumers = []; // This component provides the position of a modal dialog in the list of all open dialogs.
// The key behaviours are:
// - When a modal renders for the first time it takes the first stack position
// - When a modal mounts, all other modals have to adjust their position
// - When a modal unmounts, all other modals have to adjust their position

var StackConsumer =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(StackConsumer, _React$Component);

  function StackConsumer() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, StackConsumer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(StackConsumer)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "state", {
      stackIndex: 0
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "update", function () {
      var stackIndex = stackConsumers.indexOf(_this.update);

      if (_this.state.stackIndex !== stackIndex) {
        _this.setState({
          stackIndex: stackIndex
        });
      }
    });
    return _this;
  }

  (0, _createClass2.default)(StackConsumer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      stackConsumers.forEach(function (updateFn) {
        return updateFn();
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this2 = this;

      // This check will pass if the <Transition><Modal/></Transition> pattern has not been
      // implemented correctly. In this case, will still need to make sure we remove ourselves
      // from the stack list.
      if (stackConsumers.indexOf(this.update) !== -1) {
        stackConsumers = stackConsumers.filter(function (stack) {
          return stack !== _this2.update;
        });
        stackConsumers.forEach(function (updateFn) {
          return updateFn();
        });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this3 = this;

      if (prevProps.isOpen && !this.props.isOpen) {
        stackConsumers = stackConsumers.filter(function (stack) {
          return stack !== _this3.update;
        });
        stackConsumers.forEach(function (updateFn) {
          return updateFn();
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      if (stackConsumers.indexOf(this.update) === -1) {
        // add this instance to stack consumer list
        stackConsumers = [this.update].concat((0, _toConsumableArray2.default)(stackConsumers));
      }

      return this.props.children(this.state.stackIndex);
    }
  }]);
  return StackConsumer;
}(_react.default.Component);

var _default = StackConsumer;
exports.default = _default;