"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _rafSchd = _interopRequireDefault(require("raf-schd"));

var _reactScrolllock = _interopRequireDefault(require("react-scrolllock"));

var _Footer = _interopRequireDefault(require("./Footer"));

var _Header = _interopRequireDefault(require("./Header"));

var _Content = require("../styled/Content");

function getInitialState() {
  return {
    showFooterKeyline: false,
    showHeaderKeyline: false,
    tabbableElements: []
  };
}

var Content =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Content, _Component);

  function Content() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Content);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Content)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "escapeIsHeldDown", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "_isMounted", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "scrollContainer", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "state", getInitialState());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "determineKeylines", (0, _rafSchd.default)(function () {
      if (!_this.scrollContainer) return;
      var _this$scrollContainer = _this.scrollContainer,
          scrollTop = _this$scrollContainer.scrollTop,
          scrollHeight = _this$scrollContainer.scrollHeight,
          clientHeight = _this$scrollContainer.clientHeight;
      var scrollableDistance = scrollHeight - clientHeight;
      var showHeaderKeyline = scrollTop > _Content.keylineHeight;
      var showFooterKeyline = scrollTop <= scrollableDistance - _Content.keylineHeight;

      _this.setState({
        showHeaderKeyline: showHeaderKeyline,
        showFooterKeyline: showFooterKeyline
      });
    }));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "getScrollContainer", function (ref) {
      if (!ref) return;
      _this.scrollContainer = ref;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleKeyUp", function () {
      _this.escapeIsHeldDown = false;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleKeyDown", function (event) {
      var _this$props = _this.props,
          onClose = _this$props.onClose,
          shouldCloseOnEscapePress = _this$props.shouldCloseOnEscapePress,
          _this$props$stackInde = _this$props.stackIndex,
          stackIndex = _this$props$stackInde === void 0 ? 0 : _this$props$stackInde; // avoid consumers accidently closing multiple modals if they hold escape.

      if (_this.escapeIsHeldDown) return;
      if (event.key === 'Escape') _this.escapeIsHeldDown = true; // only the foremost modal should be interactive.

      if (!_this._isMounted || stackIndex > 0) return;

      switch (event.key) {
        case 'Escape':
          if (shouldCloseOnEscapePress) onClose(event);
          break;

        default:
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleStackChange", function (stackIndex) {
      var onStackChange = _this.props.onStackChange;
      if (onStackChange) onStackChange(stackIndex);
    });
    return _this;
  }

  (0, _createClass2.default)(Content, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this._isMounted = true; // $FlowFixMe - issue with document.addEventListener - Enum incompatible

      document.addEventListener('keydown', this.handleKeyDown, false);
      document.addEventListener('keyup', this.handleKeyUp, false);

      if (this.scrollContainer) {
        var capturedScrollContainer = this.scrollContainer;
        window.addEventListener('resize', this.determineKeylines, false);
        capturedScrollContainer.addEventListener('scroll', this.determineKeylines, false);
        this.determineKeylines();
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var stackIndex = this.props.stackIndex; // update focus scope and let consumer know when stack index has changed

      if (nextProps.stackIndex && nextProps.stackIndex !== stackIndex) {
        this.handleStackChange(nextProps.stackIndex);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._isMounted = false; // $FlowFixMe - issue with document.addEventListener - Enum incompatible

      document.removeEventListener('keydown', this.handleKeyDown, false);
      document.removeEventListener('keyup', this.handleKeyUp, false);

      if (this.scrollContainer) {
        var capturedScrollContainer = this.scrollContainer;
        window.removeEventListener('resize', this.determineKeylines, false);
        capturedScrollContainer.removeEventListener('scroll', this.determineKeylines, false);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          actions = _this$props2.actions,
          appearance = _this$props2.appearance,
          ModalBody = _this$props2.body,
          children = _this$props2.children,
          footer = _this$props2.footer,
          header = _this$props2.header,
          heading = _this$props2.heading,
          onClose = _this$props2.onClose,
          isChromeless = _this$props2.isChromeless,
          isHeadingMultiline = _this$props2.isHeadingMultiline,
          shouldScroll = _this$props2.shouldScroll;
      var _this$state = this.state,
          showFooterKeyline = _this$state.showFooterKeyline,
          showHeaderKeyline = _this$state.showHeaderKeyline;

      if (isChromeless) {
        return _react.default.createElement(_Content.Wrapper, null, children, _react.default.createElement(_reactScrolllock.default, null));
      }

      return _react.default.createElement(_Content.Wrapper, null, _react.default.createElement(_Header.default, {
        appearance: appearance,
        component: header,
        heading: heading,
        onClose: onClose,
        isHeadingMultiline: isHeadingMultiline,
        showKeyline: showHeaderKeyline
      }), _react.default.createElement(ModalBody, {
        innerRef: this.getScrollContainer,
        shouldScroll: shouldScroll
      }, children), _react.default.createElement(_Footer.default, {
        actions: actions,
        appearance: appearance,
        component: footer,
        onClose: onClose,
        showKeyline: showFooterKeyline
      }), _react.default.createElement(_reactScrolllock.default, null));
    }
  }]);
  return Content;
}(_react.Component);

exports.default = Content;
(0, _defineProperty2.default)(Content, "defaultProps", {
  autoFocus: false,
  isChromeless: false,
  stackIndex: 0,
  body: _Content.Body,
  isHeadingMultiline: true
});