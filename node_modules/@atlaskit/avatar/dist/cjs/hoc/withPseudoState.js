"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = withPseudoState;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../utils");

var INTERNAL_HANDLERS = ['onBlur', 'onFocus', 'onKeyDown', 'onKeyUp', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseUp'];

function withPseudoState(WrappedComponent) {
  var _class, _temp;

  return _temp = _class =
  /*#__PURE__*/
  function (_Component) {
    (0, _inherits2.default)(ComponentWithPseudoState, _Component);

    function ComponentWithPseudoState() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, ComponentWithPseudoState);

      for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
        _args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ComponentWithPseudoState)).call.apply(_getPrototypeOf2, [this].concat(_args)));
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "component", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "actionKeys", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "state", {
        isActive: Boolean(_this.props.isActive),
        isFocus: Boolean(_this.props.isActive),
        isHover: Boolean(_this.props.isActive),
        isInteractive: Boolean(_this.props.href || _this.props.isInteractive || _this.props.onClick)
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "blur", function () {
        if (_this.component && _this.component.blur) _this.component.blur();
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "focus", function () {
        if (_this.component && _this.component.focus) _this.component.focus();
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "setComponent", function (component) {
        _this.component = component;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onBlur", function () {
        return _this.setState({
          isActive: false,
          isFocus: false
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onFocus", function () {
        return _this.setState({
          isFocus: true
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onMouseLeave", function () {
        return _this.setState({
          isActive: false,
          isHover: false
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onMouseEnter", function () {
        return _this.setState({
          isHover: true
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onMouseUp", function () {
        return _this.setState({
          isActive: false
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onMouseDown", function () {
        return _this.setState({
          isActive: true
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onKeyDown", function (event) {
        if (_this.actionKeys.indexOf(event.key) > -1) {
          _this.setState({
            isActive: true
          });
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onKeyUp", function (event) {
        if (_this.actionKeys.indexOf(event.key) > -1) {
          _this.setState({
            isActive: false
          });
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "getProps", function () {
        var isInteractive = _this.state.isInteractive; // strip the consumer's handlers off props, then merge with our handlers
        // if the element is interactive
        // We cannot properly type omit because of the inability to convert from
        // an array to a union of the array's items. See https://github.com/facebook/flow/issues/961
        // if you want to learn more about this
        // $FlowFixMe

        var props = _utils.omit.apply(void 0, [_this.props].concat(INTERNAL_HANDLERS));

        var self = (0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this));

        if (isInteractive) {
          INTERNAL_HANDLERS.forEach(function (handler) {
            if (_this.props[handler]) {
              props[handler] = function () {
                var _this$props;

                self[handler].apply(self, arguments);

                (_this$props = _this.props)[handler].apply(_this$props, arguments);
              };
            } else {
              props[handler] = self[handler];
            }
          });
        }

        return props;
      });
      return _this;
    }

    (0, _createClass2.default)(ComponentWithPseudoState, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this$props2 = this.props,
            href = _this$props2.href,
            isInteractive = _this$props2.isInteractive,
            onClick = _this$props2.onClick;

        if (href || isInteractive || onClick) {
          this.actionKeys = onClick || isInteractive ? ['Enter', ' '] : ['Enter'];
        }
      }
    }, {
      key: "render",
      value: function render() {
        return _react.default.createElement(WrappedComponent, (0, _extends2.default)({
          ref: this.setComponent
        }, this.state, this.getProps()));
      }
    }]);
    return ComponentWithPseudoState;
  }(_react.Component), (0, _defineProperty2.default)(_class, "displayName", (0, _utils.getDisplayName)('withPseudoState', WrappedComponent)), _temp;
}