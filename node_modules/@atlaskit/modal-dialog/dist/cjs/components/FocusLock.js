"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _tinyInvariant = _interopRequireDefault(require("tiny-invariant"));

var _reactFocusLock = _interopRequireDefault(require("react-focus-lock"));

// Thin wrapper over react-focus-lock. This wrapper only exists to ensure API compatibility.
// This component should be deleted during https://ecosystem.atlassian.net/browse/AK-5658
var FocusLock =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(FocusLock, _Component);

  function FocusLock() {
    (0, _classCallCheck2.default)(this, FocusLock);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(FocusLock).apply(this, arguments));
  }

  (0, _createClass2.default)(FocusLock, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          isEnabled = _this$props.isEnabled,
          autoFocus = _this$props.autoFocus;

      if (process.env.NODE_ENV !== 'production') {
        (0, _tinyInvariant.default)(typeof autoFocus === 'boolean', '@atlaskit/modal-dialog: Passing a function as autoFocus is deprecated. Instead call focus on the element ref or use the autofocus property.');
      }

      if (typeof autoFocus === 'function' && isEnabled) {
        var elem = autoFocus();

        if (elem && elem.focus) {
          elem.focus();
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          isEnabled = _this$props2.isEnabled,
          autoFocus = _this$props2.autoFocus,
          shouldReturnFocus = _this$props2.shouldReturnFocus;
      return _react.default.createElement(_reactFocusLock.default, {
        disabled: !isEnabled,
        autoFocus: !!autoFocus,
        returnFocus: shouldReturnFocus
      }, this.props.children);
    }
  }]);
  return FocusLock;
}(_react.Component);

exports.default = FocusLock;
(0, _defineProperty2.default)(FocusLock, "defaultProps", {
  autoFocus: true,
  isEnabled: true,
  shouldReturnFocus: true
});